P Simple {
  S Container {
    nat x
    |
    x <- 1
  };
  S Simple {
    Container cond, c1, c2, tmp, c
    |
    tmp.x <- c1.x + c2.x
  }
  if cond.x > 0 then {
    nat i
    |
    i <- 2;
    c.x <- (tmp.x + c1.x) * c2.x * i
  }
  else
    c.x <- tmp.x + (c1.x / c2.x)
  fi;
  Q task {on Simple in c1.x, c2.x out tmp.x}
}